1 уровень сложности: 1.Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?
2.Как вернуть файл из индекса в рабочий каталог?
3.Как отменить ошибочный commit ?
4.Как создать новую ветку и переключится в нее?
5.В чем отличение между fast-forward merge  and non fast-forfard merge?
6.Когда может возникнуть конфликт слияния веток, как  его разрешить?
7.Можно ли удалить ветку? Как? 

В ответах на вопросы 1-4, 7 необходимо указать конкретные команда git. 
На 5 и 6 вопросы дать объяснение своими словами.




1. Чтобы отказаться от изменений в файлах, находящихся в рабочем каталоге, можно использовать команду git checkout -- <имя_файла>. 
Эта команда вернет файл к его состоянию на последнем коммите.

2. Чтобы вернуть файл из индекса в рабочий каталог, используется команда git reset HEAD <имя_файла>. 
Эта команда снимет файл с индекса, вернув его к состоянию в последнем коммите.

3. Для отмены ошибочного коммита можно использовать команду git revert <хэш_коммита>. Она создаст новый коммит, который отменит изменения, 
внесенные указанным коммитом. Другой вариант - использовать команду git reset <хэш_коммита> в сочетании с опцией --hard, но этот метод 
не рекомендуется, если коммит уже был опубликован.

4. Чтобы создать новую ветку и переключиться на нее, используется команда git checkout -b <имя_ветки>. Эта команда создаст новую ветку 
с указанным именем и автоматически переключит на нее.

5. Fast-forward merge и non fast-forward merge отличаются в способе объединения веток. Fast-forward merge происходит, когда целевая ветка 
(ветка, в которую происходит слияние) не имеет новых коммитов после ветки, которая сливается. В этом случае Git просто передвигает указатель 
целевой ветки на самый последний коммит сливаемой ветки. Non fast-forward merge происходит, когда целевая ветка имеет новые коммиты после ветки, 
которая сливается. В этом случае Git создает новый коммит с объединением изменений обеих веток.

6. Конфликт слияния веток возникает, когда две ветки внесли изменения в одни и те же строки кода, и Git не может автоматически определить, 
какие изменения следует применить. Конфликт обычно отображается в файлах с пометками "<<<<<<< HEAD", "=======", и ">>>>>>>". Чтобы разрешить 
конфликт, нужно вручную отредактировать файлы, удалив пометки и оставляя только нужные изменения. После редактирования файлов нужно добавить их
в индекс с помощью команды git add <имя_файла>. После этого выполнение слияния можно завершить с помощью команды git commit, которая создаст 
новый коммит с разрешенными конфликтами.

7. Да, можно удалить ветку в Git. Для удаления ветки используется команда git branch -d <имя_ветки>. Однако, перед удалением ветки, нужно убедиться, 
что мы не потеряем какую-либо важную информацию. Если ветка содержит некоммитированные изменения или если нужно удалить ветку, которая 
еще не была слита с другой веткой, используется опция -D вместо -d, например: git branch -D <имя_ветки>.
